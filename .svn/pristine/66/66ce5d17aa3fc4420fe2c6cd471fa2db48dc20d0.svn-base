package com.nsdevil.osce.common.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.web.multipart.MultipartFile;

public class FileUploader {
	
	public static String uploadFile(String uploadDir, MultipartFile file) {
		String fileName = null;
		String realName = null;
		//파일이 있으면 업로드
		if (file != null) {
			//업로드 폴더 생성
			String[] dirList = uploadDir.split("/");
			String filePath = "";
			for (String dir : dirList) {
				filePath += dir + "/";
				File fileDir = new File(filePath);
				if (!fileDir.exists()) {
					fileDir.mkdirs();
				}
			}
			fileName = file.getOriginalFilename();
			String fileExt = fileName.substring(fileName.lastIndexOf(".")+1, fileName.length());
    		realName = Util.getUploadFileName(uploadDir, file.getOriginalFilename());
			//upload 가능한 파일 타입 지정
	        if(fileExt.equalsIgnoreCase("jpg") ||
	        		fileExt.equalsIgnoreCase("jpeg") ||
	        		fileExt.equalsIgnoreCase("gif") ||
	        		fileExt.equalsIgnoreCase("pdf") ||
	        		fileExt.equalsIgnoreCase("png") ||
	        		fileExt.equalsIgnoreCase("bmp") ||
	        		fileExt.equalsIgnoreCase("mp3") ||
	        		fileExt.equalsIgnoreCase("mp4") ||
	        		fileExt.equalsIgnoreCase("wmv") ||
	        		fileExt.equalsIgnoreCase("xml") ||
	        		fileExt.equalsIgnoreCase("xls") ||
	        		fileExt.equalsIgnoreCase("xlsx") ||
	        		fileExt.equalsIgnoreCase("txt") ||
	        		fileExt.equalsIgnoreCase("hwp") ||
	        		fileExt.equalsIgnoreCase("doc") ||
	        		fileExt.equalsIgnoreCase("docx") ||
	        		fileExt.equalsIgnoreCase("ppt") ||
	        		fileExt.equalsIgnoreCase("pptx") ||
	        		fileExt.equalsIgnoreCase("zip")) {
	        	
	            try {
	            	byte[] bytes = file.getBytes();
					File outFile = new File(uploadDir + "/" + realName);
					FileOutputStream fileOutputStream = new FileOutputStream(outFile);
					fileOutputStream.write(bytes);
					fileOutputStream.close();
	            } catch(IOException e) {
	            	e.printStackTrace();
	            }
	        } else {
	        	realName = "not";
	        }
		}
		return realName;
	}
	
	
	
	public static boolean evalutionFileCreate(String dirPath, String fileName, HSSFWorkbook workbook) {
		boolean isSuccess = false;
		try{
			
			String[] dirList = dirPath.split("/");
			String filePath = "";
			for (String dir : dirList) {
				filePath += dir + "/";
				File fileDir = new File(filePath);
				if (!fileDir.exists()) {
					fileDir.mkdirs();
				}
			}
			
			File outFile = new File(dirPath + fileName);
			FileOutputStream fileOutputStream = new FileOutputStream(outFile);
			workbook.write(fileOutputStream);
			byte[] bytes = fileName.getBytes();
			fileOutputStream.write(bytes);
			fileOutputStream.close();
			isSuccess = true;
		} catch (Exception e) { 
		       e.printStackTrace();
	    }
		
		return isSuccess;
	}
}
