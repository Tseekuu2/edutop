package com.nsdevil.osce.common.view;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.servlet.view.AbstractView;

public class ZipDownloadView extends AbstractView {
	
	@Value("#{config['root_path']}")
	private String ROOT_PATH;
	
	public ZipDownloadView() {
		setContentType("binary/octet-stream; charset=utf-8");
	}
	
	@Override
	protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String zipFileName = (String)model.get("zipFileName");
		String browser = request.getHeader("User-Agent");
		
		if(browser.contains("MSIE") || browser.contains("Trident") || browser.contains("Edge")) {
			zipFileName = URLEncoder.encode(zipFileName, "utf-8").replaceAll("\\+", "%20");
		} else {
			zipFileName = new String(zipFileName.getBytes("utf-8"), "iso-8859-1");
		}
		
		response.setContentType("Content-type: text/zip");
		response.setHeader("Content-Disposition", "attachment; filename="+zipFileName+".zip");
		
		@SuppressWarnings("unchecked")
		List<HashMap<String, Object>> fileInfoList =  (ArrayList<HashMap<String, Object>>) model.get("fileList");
		List<File> files = new ArrayList<File>();
		for (HashMap<String, Object> map : fileInfoList) {
			files.add(new File(ROOT_PATH + ((String)map.get("path"))));
		}
		
		ServletOutputStream out = response.getOutputStream();
		ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(out));
		
		for(int i=0; i<files.size(); i++) {
			HashMap<String, Object> map = fileInfoList.get(i);
			try {
				zos.putNextEntry(new ZipEntry((String)map.get("ori_file_name")));
			}catch(ZipException ze) {
				String msg = ze.getMessage();
				if(msg.contains("duplicate entry")) {
					String fileName = (String)map.get("ori_file_name");
					String ext = fileName.substring(fileName.lastIndexOf(".")+1);
					fileName = fileName.substring(0, fileName.lastIndexOf("."))+"_"+i+"."+ext;
					zos.putNextEntry(new ZipEntry(fileName));
				}
			}
			FileInputStream fis = null;
			
			try {
				fis = new FileInputStream(files.get(i));
			} catch(FileNotFoundException fnfe) {
				zos.write(("ERRORld not find file " + files.get(i).getName()).getBytes());
				zos.closeEntry();
				continue;
			}
			
			BufferedInputStream fif = new BufferedInputStream(fis);
			int data = 0;
			
			while ((data = fif.read()) != -1) {
				zos.write(data);
			}
			
			fif.close();
			zos.closeEntry();
		}
		zos.close();
	}
}
